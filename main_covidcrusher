import import_ipynb
import covid_crusher
import sys
from PyQt5 import QtGui , QtCore
from PyQt5 import QtWidgets

        
class Example(QtWidgets.QMainWindow):
    def __init__(self):
        super(Example, self).__init__()
        self.game = jeu_et_regle.GrilleJeu()
        self.btn = [[QtWidgets.QPushButton('', self)
                    for j in range(len(self.game.grille))]
                    for i in range(len(self.game.grille))]             
        self.icone_dic = {1 : 'Users\HP\Desktop\icones\1.png',
                          2 : 'Users\HP\Desktop\icones\2.png',
                          3 : 'Users\HP\Desktop\icones\3.png',
                          4 : 'Users\HP\Desktop\icones\4.png',
                          5 : 'Users\HP\Desktop\icones\5.png',
                          6 : 'Users\HP\Desktop\icones\6.png',
                          7 : 'Users\HP\Desktop\icones\7.png',
                          } 
        self.initUI()
        self.click = []

                          
    def refresh_grille(self):        
        for j in range(len(self.game.grille)):
            for i in range(len(self.game.grille)):
                self.btn[i][j].setText('')
                self.set_icon(i,j)
        self.movesLabel.setText(str(self.game.moves))
        self.scoreLabel.setText(str(self.game.score))
        
    def buttonconnect(self):          
        for i in range(len(self.game.grille)):
            for j in range(len(self.game.grille)):
               self.btn[i][j].clicked.connect(self.buttonClicked) 
               self.btn[i][j].value = [i,j]

    def affiche_grille(self):  
        for i in range(len(self.game.grille)):
            for j in range(len(self.game.grille)):
                self.btn[i][j].setFixedSize(50, 50)
                self.btn[i][j].move(50*(j + 1), 50*(i + 1))
                self.set_icon(i,j)
    def set_icon(self,i,j):
        self.btn[i][j].setIcon(QtGui.QIcon(
                                    self.icone_dic[self.game.get_item(i,j)]))
    def initUI(self):
        self.buttonconnect()
        self.statusBar()
        self.affiche_grille()
        # Score
        score = QtWidgets.QLabel('<b>' + 'Score' + '</b>', self)
        score.move(460, 50)
        self.scoreLabel = QtWidgets.QLabel(str(self.game.score), self)
        self.scoreLabel.move(520, 50)
        
        
        Moves = QtWidgets.QLabel('<b>' + 'Moves' + '</b>', self)
        Moves.move(460, 100)
        self.movesLabel = QtWidgets.QLabel(str(self.game.moves), self)
        self.movesLabel.move(520, 100)
        
        # reset button
        self.btn_reset = QtWidgets.QPushButton('Reset', self)
        self.btn_reset.move(450, 150)
        self.btn_reset.setFixedSize(100, 30)
        self.btn_reset.clicked.connect(self.Reset) 
        
        # Quit button
        self.btn_reset = QtWidgets.QPushButton('Quit', self)
        self.btn_reset.move(450, 180)
        self.btn_reset.setFixedSize(100, 30)
        self.btn_reset.clicked.connect(self.close) 
        
        # window
        self.setGeometry(220, 200, 590, 500)
        self.setWindowTitle('covid crush')
        self.show()
        
    def Reset(self):
        self.game = jeu_et_regle.GrilleJeu()
        self.refresh_grille()

        
    def buttonClicked(self):
        if(self.game.moves < 20):      
            sender = self.sender()
            index = sender.value
            sender.setText('*')
            self.set_click(index)
        else:
            self.statusBar().showMessage(
            'You have completed your game, your scor is' + 
            str(self.game.score))
        
    def set_click(self,index):
        if( len(self.click) == 0):      
            self.click.append(index)
        elif (len(self.click) == 1):
            self.click.append(index)
            self.game.move(self.click[0][0], self.click[0][1],
                           self.click[1][0], self.click[1][1])
            self.refresh_grille()    
        else:        
            self.click =[]
            self.click.append(index)
        
            
            
def main():
    app = QtWidgets.QApplication(sys.argv)
    ex = Example()
    
    sys.exit(app.exec_())
    
    
if __name__ == '__main__':
    main()
